alias file=/home/greg/blaster/sfcs/src/main/kotlin/com/gzozulin/proj/ProjectorModel.kt
alias model=ProjectorModel

# Abstract (video with me)
# Name is Greg
# Welcome to the pages of my video journal
# Looking for a way to show and tell about my projects
# Previous attempts: articles
# Videos are better than text, especially for CG
# This is not an educational podcast, just for fun
# Projector - comics for programmers
# Hope you like watching same as I liked creating!

# Intro to projector (video with me)
# End result: project code appearing on the screen in order
# Technology stack: Kotlin, ANTLR, OpenGL
# Projector structure, MVC for the project after multiple approaches
# Focus of this episode: Model
# Two main flows: parse, advance

# Overview of parsing flow (whiteboard)
# Start with scenario text file
# Parse into a graph of scenario nodes
# Code lookup: ANTLR/Visitor
# Ordered tokens
# Text Page with Ordered Spans

2000 file/ScenarioNode
# Scenario file representation after parsing
# Order when to show, file and identifier, timeout to show and children

2000 file/model
# Main class

2000 file/model/projectScenario
2000 file/model/kotlinFiles
2000 file/model/renderedPages
2000 file/model/currentPage
2000 file/model/currentPageCenter
2000 file/model/isAdvancingSpans
2000 file/model/currentFrame
2000 file/model/currentOrder
2000 file/model/currentTimeout
# Creating variables to store the result
# Variables contains: current scenario, rendered pages, information about current progress

2000 file/model/renderScenario
# Where the rendering starts

2000 file/model/splitPerFile
# Simple concurrency: per file
# Map between scenario nodes and corresponding files

2000 file/model/renderConcurrently
# Launching coroutines
# Waiting for the result

2000 file/model/renderFile
# Parsing Kotlin code first
# Looking for code mentioned in scenario with Visitor
# Finally, preparing the page with spans to draw later with OpenGL

2000 file/model/parseKotlinFile
# Using ANTLR to parse Kotlin
# API is a separate discussion

2000 file/OrderedToken
# ANTLR token + order

2000 file/OrderedSpan
# Text span + order

2000 file/model/preparePage
# Drawable text page
# We will discuss it in more details with presentation classes

2000 file/Visitor
# Few words about how visitor pattern works
# Walks through whole file
# Stops at every declaration
# Searches for the declaration among mentioned in scenario
# If found and have children: recursively repeats for children
# If not: returns the found tokens via method reference
# Each token is assigned an order from scenario

# Overview of advancing (whiteboard)
# The process of rendering text: full page span by span
# Spans contains style and assigned order in the previous flow
# With each iteration we are looking for next invisible in the current order
# If none found: waiting until the order timeout is over
# Proceeding to the next order

2000 file/model/advanceScenario
# Called each frame
# Two states: advancing spans and advancing timeout

2000 file/model/advanceSpans
# To maintain a speed we count frames
# When we waited enough frames, we start looking for next INVISIBLE
# When found: we make it visible
# And then center the page on it

2000 file/model/findNextInvisibleSpan
# To find next INVISIBLE we just apply filtering to spans

2000 file/model/updatePageCenter
# After INVISIBLE marked as VISIBLE, we focus center of viewport on it

2000 file/model/advanceTimeout
# When no INVISIBLE spans found
# We are waiting until the timeout for this order is elapsed

2000 file/model/nextOrder
# Switching to a next order
# If the order is last: starting all over

2000 file/model/prepareOrder
# Before we can proceed,
# We need to prepare next order for animation

2000 file/model/findCurrentPage
# We need to find the current page to show

2000 file/model/makeOrderInvisible
# Mark all spans in this order invisible

2000 file/model/findOrderTimeout
# And find the timeout for this order in scenario

# Outro (video with me)
# That is it, the boring part is over
# Next episode is about showing animated code and rendering the scene
# Hope you liked it and see you next time!